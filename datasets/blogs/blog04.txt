Title: Why Multi-AZ Deployments Are Worth the Cost
Author: JV Roig

The database is the heart of applications. If your database server goes down, it typically doesn't really matter if your application servers are still up - they wouldn't be able to do useful things for your user without talking to the database server.
Amazon Relational Database Service (RDS) gives us a convenient and powerful way to make your critical databases more resilient and available: RDS Multi-AZ deployments
Multi-AZ Deployments
Amazon RDS has a feature called Multi-AZ (yes, that means multiple Availability Zones). When you choose Multi-AZ for your RDS deployment, RDS creates not just a primary DB instance, but also a second instance in a different AZ. RDS also automatically configures synchronous replication from the primary DB instance to the secondary.
When RDS detects that the primary DB instance has failed, RDS automatically fails over to the second instance, and this failover can be as quick as 60 seconds.
Like Read Replicas, your secondary instance is not free, and costs the same as the primary instance - effectively, that means you double your instance costs.
Do I Get Extra Performance for the Cost?
A common question I get when discussing an RDS Multi-AZ deployment with customers is: "JV, if I'm paying double the price with Multi-AZ, do I at least get extra performance out of it?"
The short answer, sadly, is NO.
But Why??!!
The secondary instance in a Multi-AZ instance is incapable of serving requests - and this is why it is often called a standby instance. It's just there, standing by in case it is needed during a failover - but it is otherwise not really contributing extra performance. Through synchronous replication, it is kept up-to-date faster and more reliably than a read replica (which uses asynchronous replication), but unfortunately this replication is one-way only.
This means the secondary instance could never receive write requests (because then those writes wouldn't make it to the primary instance, since the replication is synchronous but one-way).
It also can't be used for read requests like a read replica. This is a tradeoff due to a limitation in technology. Synchronous replication is superior to asynchronous replication in terms of data durability, because any DB transaction will only be considered a success after it is successfully committed to both the primary instance and standby instance. But that's also why we can't use the standby for read traffic, especially for non-trivial read ops (say, huge reporting queries, like the ones you would send to a read replica) - if the standby instance is doing other things, especially non-trivial things that occupy CPU or I/O time, then it would take longer to commit transactions on its end, and then it would make the primary DB instance wait longer for transaction success confirmation. The end result is that users experience poorer performance overall from the primary DB due to longer commit times - and reducing the performance of your primary, mission-critical DB is most certainly not what you want. And so, Multi-AZ standbys are just not used to serve any traffic at all.
A Longer Answer About That Extra Performance…
There is a slightly longer answer.
In general, no, you don't get extra performance despite paying double. What you get is a quick & painless failover - and in a disaster, that's exactly what you'd hope for.
But… if you were willing to pay triple instead of double (I know, I know, hold the eye roll for a bit), you can actually get both extra performance and a quick & painless failover. This is a more advanced (and yep, costly) feature called Multi-AZ with two readable standbys.
With such an amazing name from Amazon's crack product-naming team, you basically already understand the gist of it: In a Multi-AZ with two readable standbys deployment, RDS automatically gives you two standby instances instead of just 1, and these standby instances can serve read traffic. Write traffic is still a no-go.
Both of the readable standbys can serve traffic, so you get a performance boost. You also don't have to manually manage the connection or load-balancing between these two readable standbys - RDS abstracts both of them under a unified reader endpoint.
So if you get extra performance alongside a quick & painless failover, is this worth paying triple? Maybe. Sorry, I know that sucks, but let me explain. It's a cool capability, for sure, but it currently has a ton of limitations (ref: official AWS docs), some of which aren't trivial - for example, limited database engine support (doesn't support Oracle, SQL Server, and MariaDB), limited Region support, doesn't support read replicas, doesn't support IAM DB authentication…
Most of those limitations will likely get better over time - but as of now, paying triple the cost for a configuration that has a lot of hard limitations means you have to be sure none of those limitations matter to you, and that you aren't better of just combining vanilla Multi-AZ + Read Replicas (more on that combo next week!).
Wrap up
Multi-AZ isn't really designed for extra performance (unless you really want to go for Multi-AZ with two readable standbys despite its current limitations), but what you get in exchange - synchronous replication for unmatched data durability + a quick & painless failover - is well worth considering.
In a disaster, the last thing you want to be doing is fiddling with endpoints and doing a manual failover. RDS Multi-AZ is your best friend here, handling that failover for you quickly and without any manual intervention.
